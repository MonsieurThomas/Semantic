import React, { useEffect, useState } from "react";
import { useRouter } from "next/router";
import io from "socket.io-client";
import { AnimatePresence, motion } from "framer-motion";

interface LoadingTimeProps {
  randomPhrase: string;
}

const LoadingTime: React.FC<LoadingTimeProps> = ({ randomPhrase }) => {
  const router = useRouter();
  const [progress, setProgress] = useState(0);
  const [loadingComplete, setLoadingComplete] = useState(false);
  const [documentInfo, setDocumentInfo] = useState<{
    id: string;
    openaiResponse: string;
  } | null>(null);

  useEffect(() => {
    const socket = io({
      path: "/api/socket",
    });

    socket.on(
      "loadingComplete",
      (docInfo: { id: string; openaiResponse: string }) => {
        setDocumentInfo(docInfo);
        setLoadingComplete(true);
      }
    );

    return () => {
      socket.disconnect();
    };
  }, []);

  useEffect(() => {
    const intervals = [
      { duration: 0, progress: 5 },
      { duration: 1000, progress: 10 },
      { duration: 1500, progress: 35 },
      { duration: 800, progress: 50 },
      { duration: 2000, progress: 65 },
      { duration: 1200, progress: 85 },
      { duration: 1000, progress: 98 },
    ];

    let currentInterval = 0;

    const updateProgress = () => {
      if (currentInterval < intervals.length) {
        setTimeout(() => {
          setProgress(intervals[currentInterval].progress);
          currentInterval++;
          updateProgress();
        }, intervals[currentInterval].duration);
      }
    };

    updateProgress();
  }, []);

  useEffect(() => {
    if (loadingComplete && documentInfo) {
      router.push({
        pathname: "/CanvasDrawing",
        query: {
          id: documentInfo.id,
          openaiResponse: JSON.stringify(documentInfo.openaiResponse),
        },
      });
    }
  }, [loadingComplete, documentInfo, router]);

  return (
    <div className="relative h-[85vh] w-screen">
      <AnimatePresence>
        {progress >= 10 && (
          <>
            <motion.h1
              key="exemple"
              className="font-bold text-2xl absolute top-[40px] left-[300px]"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.5 }}
            >
              Exemple
            </motion.h1>
            <motion.h1
              key="initiatives"
              className="font-bold text-2xl absolute top-[350px] left-[1100px]"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.5 }}
            >
              Initiatives
            </motion.h1>
          </>
        )}

        {progress >= 35 && (
          <>
            <motion.h1
              key="application"
              className="font-bold text-2xl absolute top-[220px] left-[700px]"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.5 }}
            >
              Application
            </motion.h1>
            <motion.h1
              key="milliard"
              className="font-bold text-2xl absolute top-[300px] left-[200px]"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.5 }}
            >
              Milliard
            </motion.h1>
          </>
        )}

        {progress >= 65 && (
          <>
            <motion.h1
              key="million"
              className="font-bold text-2xl absolute top-[150px] left-[1150px]"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.5 }}
            >
              Million
            </motion.h1>
            <motion.h1
              key="solution"
              className="font-bold text-2xl absolute top-[280px] left-[500px]"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.5 }}
            >
              Solution
            </motion.h1>
          </>
        )}
      </AnimatePresence>

      <div className="absolute bottom-20 left-1/2 transform -translate-x-1/2 w-1/3">
        <div className="w-full bg-gray-100 h-4 rounded-full overflow-hidden">
          <div
            className="bg-[#FCA310] h-full"
            style={{ width: `${progress}%`, transition: "width 0.9s" }}
          ></div>
        </div>
      </div>

      <div
        className="absolute bottom-4 left-1/2 transform -translate-x-1/2 w-full flex justify-center items-start leading-tight"
        style={{ height: "60px" }}
      >
        <h3 className="font-bold text-lg text-center text-[#BBBBBB] w-[800px]">
          {randomPhrase.split("\n").map((line, index) => (
            <React.Fragment key={index}>
              {line}
              {index !== randomPhrase.split("\n").length - 1 && <br />}
            </React.Fragment>
          ))}
        </h3>
      </div>
    </div>
  );
};

export const getServerSideProps = async () => {
  const phrases = [
    'Perdu dans votre mindmap ?\nPrenez du recul en d√©zoomant ou tapez "Espace" pour revenir au centre.',
    'Revenez au centre en appuyant sur "Espace" ou d√©zoomez pour voir tout le contenu.',
    "Pour acc√©der √† votre banque de marqueurs sur une map, tapez ‚Äúctrl+m‚Äù",
    "Le saviez-vous ? 8h, c‚Äôest le temps pass√© en moyenne chaque semaine au travail √† chercher de l‚Äôinformation sans la trouver. Mais √ßa, c‚Äôest sans Semantic.",
    "Le saviez-vous ? 3h, c‚Äôest le temps pass√© en moyenne par jour au travail √† chercher et g√©rer des informations. Avant Semantic en tout cas.",
    "Pensez √† sauvegarder votre mindmap : vous retrouverez dans Ma Biblioth√®que la date, les documents utilis√©s et la mindmap.",
    "Une fois au bout de votre mindmap, vous pouvez afficher le texte concern√© et basculer dans le document associ√©.",
    "Si vous travaillez tard, n‚Äôoubliez pas d‚Äôactiver le night-shift !",
    "Pensez √† utiliser les marqueurs en passant la souris sur un bloc pour personnalisez vos maps et les parcourir avec plus d‚Äôaisance.",
    "Un clic sur üëÅÔ∏è et vous pourrez faire dispara√Ætre puis r√©apparaitre une partie de la map. De quoi mieux se concentrer sur le reste !",
    // "Les mind maps peuvent aider √† organiser visuellement les concepts et leurs relations, ce qui  facilite la recherche d'informations. Une √©tude publi√©e dans \"The Journal of Educational Psychology\" a montr√© que les participants retrouvaient plus rapidement l'information dans un mind map que dans une liste lin√©aire‚Ä¶ et s‚Äôen souvenaient mieux !",
    "Une recherche men√©e par l‚Äôuniversit√© de Nouvelle-Galles du Sud a montr√© que l‚Äôutilisation de mind maps est associ√©e √† une am√©lioration de la m√©moire √† long terme.",
    "\nUne m√©ta-analyse publi√©e dans \"Educational Psychology Review\" a soulign√© que l'utilisation de mind maps √©tait associ√©e √† des performances d'apprentissage am√©lior√©es.",
    "L'universit√© de Radboud aux Pays-Bas a montr√© que les √©tudiants qui utilisaient des mind maps obtenaient de meilleurs r√©sultats aux tests de connaissances que ceux qui utilisaient des m√©thodes d'√©tude plus traditionnelles.",
  ];

  const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];

  return {
    props: {
      randomPhrase,
    },
  };
};

export default LoadingTime;
